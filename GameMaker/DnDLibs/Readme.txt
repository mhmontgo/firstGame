
	Drag and Drop library readme

	Writing code in macros

		Any word syntax prefixed with '@' is replaced with an incrementing name based on the hash of the node it's part of.
		This is a way to declare variables for use in the macros themselves. For example "var @x = 10;" will be exported as "var AEF0817_0 = 10;"

	Story localisation

		Drag and Drop nodes have three localisation strings: a name, a description, and a story. The story is a mess of macros so it can display accurate and responsive
		information to the user based on the arguments passed to the node. This file is at IDE/DnDLibs/<lib>/Languages/Source/english.csv.
		When a new entry has been added, you must run the DnDMaker tool "Expand Localisation" in its menu bar. This updates IDE/DnDLibs/<lib>/Languages/english.csv
		and IDE/DnDLibs/<lib>/Languages/lookup.json. Now it is more fit for translation.
		This tool spawns two file dialogs. First select the source, i.e. Languages/Source/english.csv, then select the destination Languages/english.csv.
		Note that Languages/Source/english.csv cannot be changed while the DnDMaker is open as it will be replaced. Instead use the built-in localisation string dialog.

	Variable input arguments

		To give a node variable input arguments (the '+' on the left of the node to add more fields), set the eActionProperties.AllowAddFields flag on the node.
		This works by regenerating the node's layout based on the data exported from the DnDMaker layout wizard at runtime.
		That means the data spat out by the wizard must be bundled with the DnD library. The layout wizard exports these files in IDE/DnDLibs/<lib>/Wizard.
		Copy the corresponding file into IDE/DnDLibs/<lib>/Layouts, include it in the project and set it to Content and Copy If Newer in properties.
		See input_template and input_separator for supporting this feature in the macro.

	Built-in macros for use in code exporting:

		child_statements		Expands to the code generated by all child nodes
		input_template			Assignable macro that serves as the macro template for each entry in a variable input argument list (e.g. [input_template=...])
		input_separator			Assignable macro that serves as the macro template for the separator between variable input argument list (e.g. [input_separator= && ])

	Built-in macros for use in story text:
		
		dnd_position			Concise wrapper for presenting ${x},${y} (with relative toggle) consistently
		dnd_position1			Variant for ${x1},${y1}
		dnd_position2			Variant for ${x2},${x2}
		dnd_pos					Variant for ${xpos},${ypos}
		dnd_get_inst_vars		A switch statement on ${instvar} for all supported 'get' instance variables
		dnd_set_inst_vars		A switch statement on ${instvar} for all supported 'set' instance variables
		show_input_count		Prettyprint variable input arguments for ${input_count}